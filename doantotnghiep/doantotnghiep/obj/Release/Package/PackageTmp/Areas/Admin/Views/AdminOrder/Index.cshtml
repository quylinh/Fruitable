@model List<doantotnghiep.Models.DonHang>

@{
    ViewBag.Title = "Quản lý đơn hàng";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";
}

<h2 class="mb-4">Danh sách đơn hàng</h2>

@using (Html.BeginForm(null, null, FormMethod.Post, new { id = "fakeFormForToken" }))
{
    @Html.AntiForgeryToken()

    <table class="table table-striped table-bordered">
        <thead class="thead-dark">
            <tr>
                <th>Mã đơn</th>
                <th>Khách hàng</th>
                <th>Ngày tạo</th>
                <th>Trạng thái</th>
                <th>Phương thức TT</th>
                <th>Người nhận</th>
                <th>SDT</th>
                <th>Tổng tiền</th>
                <th>Hành động</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var dh in Model)
            {
                <tr data-madh="@dh.MaDH" data-trangthai-goc="@dh.TrangThai">
                    <td>@dh.MaDH</td>
                    <td>@dh.MaKH</td>
                    <td>@dh.NgayTao.ToString("dd/MM/yyyy")</td>
                    <td class="trangThai">@dh.TrangThai</td>
                    <td>@dh.PhuongThucThanhToan</td>
                    <td>@dh.NguoiNhan</td>
                    <td>@dh.SDTNguoiNhan</td>
                    <td>@dh.TongTien VNĐ</td>
                    <td class="actions">
                        @if (dh.TrangThai == "Chờ xử lý")
                        {
                            <button class="btn btn-warning btn-sm" type="button" onclick="capNhatTrangThai(@dh.MaDH, 'Xác nhận đơn')">✅ Xác nhận đơn</button>
                            <button class="btn btn-secondary btn-sm" type="button" onclick="huyCapNhat(@dh.MaDH)">✖ Hủy</button>
                        }
                        else if (dh.TrangThai == "Xác nhận đơn")
                        {
                            <button class="btn btn-primary btn-sm" type="button" onclick="capNhatTrangThai(@dh.MaDH, 'Chuẩn bị hàng')">📦 Chuẩn bị hàng</button>
                            <button class="btn btn-secondary btn-sm" type="button" onclick="huyCapNhat(@dh.MaDH)">✖ Hủy</button>
                        }
                        else if (dh.TrangThai == "Chuẩn bị hàng")
                        {
                            <button class="btn btn-info btn-sm" type="button" onclick="capNhatTrangThai(@dh.MaDH, 'Đang giao')">🚚 Đang giao</button>
                            <button class="btn btn-secondary btn-sm" type="button" onclick="huyCapNhat(@dh.MaDH)">✖ Hủy</button>
                        }
                        else if (dh.TrangThai == "Đang giao")
                        {
                            <button class="btn btn-success btn-sm" type="button" onclick="capNhatTrangThai(@dh.MaDH, 'Hoàn thành')">✔ Hoàn thành</button>
                            <button class="btn btn-secondary btn-sm" type="button" onclick="huyCapNhat(@dh.MaDH)">✖ Hủy</button>
                        }
                        else if (dh.TrangThai == "Hoàn thành")
                        {
                            <span class="badge badge-secondary">Xong</span>
                        }
                        else
                        {
                            <span class="badge badge-danger">Trạng thái không xác định</span>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

<script>
    function getRequestVerificationToken() {
        var tokenInput = document.querySelector('#fakeFormForToken input[name="__RequestVerificationToken"]');
        return tokenInput ? tokenInput.value : '';
    }

    function renderActions(tr, trangThai) {
        var tdActions = tr.querySelector('.actions');
        tdActions.innerHTML = '';

        function createButton(text, btnClass, onClick) {
            var btn = document.createElement('button');
            btn.type = 'button';
            btn.className = btnClass + ' btn-sm';
            btn.textContent = text;
            btn.onclick = onClick;
            return btn;
        }

        var btnHuy = createButton('✖ Hủy', 'btn btn-secondary', function () {
            var maDH = tr.getAttribute('data-madh');
            huyCapNhat(maDH);
        });

        if (trangThai === 'Chờ xử lý') {
            var btnXacNhan = createButton('✅ Xác nhận đơn', 'btn btn-warning', function () {
                var maDH = tr.getAttribute('data-madh');
                capNhatTrangThai(maDH, 'Xác nhận đơn');
            });
            tdActions.appendChild(btnXacNhan);
            tdActions.appendChild(btnHuy);
        } else if (trangThai === 'Xác nhận đơn') {
            var btnChuanBi = createButton('📦 Chuẩn bị hàng', 'btn btn-primary', function () {
                var maDH = tr.getAttribute('data-madh');
                capNhatTrangThai(maDH, 'Chuẩn bị hàng');
            });
            tdActions.appendChild(btnChuanBi);
            tdActions.appendChild(btnHuy);
        } else if (trangThai === 'Chuẩn bị hàng') {
            var btnDangGiao = createButton('🚚 Đang giao', 'btn btn-info', function () {
                var maDH = tr.getAttribute('data-madh');
                capNhatTrangThai(maDH, 'Đang giao');
            });
            tdActions.appendChild(btnDangGiao);
            tdActions.appendChild(btnHuy);
        } else if (trangThai === 'Đang giao') {
            var btnHoanThanh = createButton('✔ Hoàn thành', 'btn btn-success', function () {
                var maDH = tr.getAttribute('data-madh');
                capNhatTrangThai(maDH, 'Hoàn thành');
            });
            tdActions.appendChild(btnHoanThanh);
            tdActions.appendChild(btnHuy);
        } else if (trangThai === 'Hoàn thành') {
            var spanXong = document.createElement('span');
            spanXong.className = 'badge badge-secondary';
            spanXong.textContent = 'Xong';
            tdActions.appendChild(spanXong);
        } else {
            var spanLoi = document.createElement('span');
            spanLoi.className = 'badge badge-danger';
            spanLoi.textContent = 'Trạng thái không xác định';
            tdActions.appendChild(spanLoi);
        }
    }

    function capNhatTrangThai(maDH, trangThaiMoi) {
        var token = getRequestVerificationToken();

        fetch('@Url.Action("CapNhatTrangThai", "AdminOrder")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `maDH=${encodeURIComponent(maDH)}&trangThaiMoi=${encodeURIComponent(trangThaiMoi)}&__RequestVerificationToken=${encodeURIComponent(token)}`
        })
        .then(res => res.text())
        .then(text => {
            if (text.startsWith("<!DOCTYPE")) {
                alert("Lỗi xác thực hoặc phiên đăng nhập đã hết hạn.");
                return;
            }
            const data = JSON.parse(text);
            if (data.success) {
                alert("Cập nhật thành công!");

                var tr = document.querySelector(`tr[data-madh='${maDH}']`);
                if (tr) {
                    // Chỉ lưu trạng thái gốc nếu chưa có (để hủy về trạng thái ban đầu)
                    if (!tr.getAttribute('data-trangthai-goc') || tr.getAttribute('data-trangthai-goc') === tr.querySelector('.trangThai').textContent) {
                        tr.setAttribute('data-trangthai-goc', tr.querySelector('.trangThai').textContent);
                    }

                    // Cập nhật trạng thái mới
                    var tdTrangThai = tr.querySelector('.trangThai');
                    if (tdTrangThai) {
                        tdTrangThai.textContent = trangThaiMoi;
                    }

                    renderActions(tr, trangThaiMoi);
                }
            } else {
                alert("Lỗi: " + data.message);
            }
        })
        .catch(err => alert("Lỗi kết nối: " + err));
    }

    function huyCapNhat(maDH) {
        var tr = document.querySelector(`tr[data-madh='${maDH}']`);
        if (!tr) return;

        var trangThaiGoc = tr.getAttribute('data-trangthai-goc');
        if (!trangThaiGoc) {
            alert("Không có trạng thái gốc để hủy!");
            return;
        }

        var token = getRequestVerificationToken();

        fetch('@Url.Action("CapNhatTrangThai", "AdminOrder")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                'RequestVerificationToken': token
            },
            body: `maDH=${encodeURIComponent(maDH)}&trangThaiMoi=${encodeURIComponent(trangThaiGoc)}&__RequestVerificationToken=${encodeURIComponent(token)}`
        })
        .then(res => res.text())
        .then(text => {
            if (text.startsWith("<!DOCTYPE")) {
                alert("Lỗi xác thực hoặc phiên đăng nhập đã hết hạn.");
                return;
            }
            const data = JSON.parse(text);
            if (data.success) {
                alert("Hủy trạng thái thành công!");

                if (tr) {
                    var tdTrangThai = tr.querySelector('.trangThai');
                    if (tdTrangThai) {
                        tdTrangThai.textContent = trangThaiGoc;
                    }
                    renderActions(tr, trangThaiGoc);

                    // Cập nhật lại trạng thái gốc thành trạng thái phục hồi
                    tr.setAttribute('data-trangthai-goc', trangThaiGoc);
                }
            } else {
                alert("Lỗi: " + data.message);
            }
        })
        .catch(err => alert("Lỗi kết nối: " + err));
    }
</script>
